import asyncio
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from database import setup_db, add_user, update_balance, get_user_data, update_last_bonus_time, update_upi, request_withdrawal, update_user_subscription

# Set up the database
setup_db()

# Telegram Channel Link
TELEGRAM_CHANNEL_LINK = "https://t.me/MrfreeInternet"

# Constants
WELCOME_BONUS = 5
DAILY_BONUS = 5
WITHDRAWAL_THRESHOLD = 100

# Message with Rules and Guidelines
RULES_MESSAGE = """
üìú *Bot Rules & Guidelines* üìú

1. üî∏ *Minimum Withdrawal*: ‚Çπ100.
2. üî∏ *Daily Bonus*: ‚Çπ5 (claimable once every 24 hours).
3. üî∏ *Referral Bonus*: ‚Çπ5 for every successful referral.
4. üî∏ *Prohibited Activities*:
   - No spamming or fake referrals.
   - No multiple accounts.
   - No abusive behavior.
   
üö´ *Violation of any rules will result in a ban and forfeiture of all earnings*.

Click *Agree & Continue* to access the bot.
"""

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    add_user(user_id)  # Add user to database if not exists

    # Check user's subscription status and show appropriate message
    _, _, _, _, _, is_subscribed = get_user_data(user_id)
    
    if not is_subscribed:
        # Show subscribe message if not subscribed
        keyboard = [
            [InlineKeyboardButton("üîî Subscribe to Channel", url=TELEGRAM_CHANNEL_LINK)],
            [InlineKeyboardButton("‚úÖ Confirm Subscription", callback_data='confirm_subscription')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('üëã Welcome! Please subscribe to the Telegram channel to start using the bot:', reply_markup=reply_markup)
    else:
        # If subscribed, show the rules message
        await show_rules(update, context)

# Show rules and guidelines after confirming subscription
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    keyboard = [[InlineKeyboardButton("‚úîÔ∏è Agree & Continue", callback_data='agree_rules')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=user_id, text=RULES_MESSAGE, reply_markup=reply_markup, parse_mode="Markdown")

# Show main menu after agreeing to rules
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    keyboard = [
        [InlineKeyboardButton("üè† Home", callback_data='home')],
        [InlineKeyboardButton("üí∞ Balance", callback_data='show_balance')],
        [InlineKeyboardButton("üéÅ Claim Daily Bonus", callback_data='claim_bonus')],
        [InlineKeyboardButton("üéÅ Refer & Earn", callback_data='refer_earn')],
        [InlineKeyboardButton("üîó Link UPI", callback_data='link_upi')],
        [InlineKeyboardButton("üíµ Withdraw", callback_data='withdraw')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=user_id, text="üè† *Main Menu*:", reply_markup=reply_markup, parse_mode="Markdown")

# Button click handler
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    balance, upi, referral_link, referrals, last_bonus_time, is_subscribed = get_user_data(user_id)

    # Handle different button clicks
    if query.data == 'confirm_subscription':
        # Update subscription status and show rules
        update_user_subscription(user_id, True)
        await query.edit_message_text("‚úÖ Subscription confirmed! Please review and agree to the rules to continue.")
        await show_rules(update, context)

    elif query.data == 'agree_rules':
        # Show main menu after agreeing to the rules
        await query.edit_message_text("‚úîÔ∏è You have agreed to the rules. Welcome!")
        await show_main_menu(update, context)

    elif query.data == 'home':
        await start(update, context)

    elif query.data == 'show_balance':
        await query.edit_message_text(f"üí∞ Your current balance is ‚Çπ{balance}")

    elif query.data == 'claim_bonus':
        await claim_daily_bonus(user_id, balance, last_bonus_time, query)

    elif query.data == 'link_upi':
        await context.bot.send_message(chat_id=user_id, text="üîó Please enter your UPI ID:")
        context.user_data['awaiting_upi'] = True

    elif query.data == 'refer_earn':
        await query.edit_message_text(f"üéÅ You have {referrals} referrals. Share this link to refer friends and earn ‚Çπ5:\n{referral_link}")

    elif query.data == 'withdraw':
        if balance >= WITHDRAWAL_THRESHOLD:
            request_withdrawal(user_id, balance)
            await query.edit_message_text("üíµ Withdrawal request sent. You will receive the funds soon.")
        else:
            await query.edit_message_text(f"üö´ You need at least ‚Çπ100 to withdraw. Your current balance is ‚Çπ{balance}.")

# Handle daily bonus claim
async def claim_daily_bonus(user_id: int, balance: float, last_bonus_time: int, query) -> None:
    current_time = int(time.time())
    if current_time - last_bonus_time >= 86400:  # 24 hours in seconds
        new_balance = balance + DAILY_BONUS
        update_balance(user_id, new_balance)
        update_last_bonus_time(user_id, current_time)
        await query.edit_message_text(f"üéâ You have claimed your daily bonus! Your new balance is ‚Çπ{new_balance}.")
    else:
        remaining_time = 86400 - (current_time - last_bonus_time)
        hours, remainder = divmod(remaining_time, 3600)
        minutes, seconds = divmod(remainder, 60)
        await query.edit_message_text(f"üö´ You can claim your daily bonus again in {hours}h {minutes}m {seconds}s.")

# Handle UPI input
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if 'awaiting_upi' in context.user_data and context.user_data['awaiting_upi']:
        upi = update.message.text
        if '@' in upi:  # Basic UPI validation
            update_upi(user_id, upi)
            await update.message.reply_text(f"‚úÖ UPI linked successfully: {upi}")
            context.user_data['awaiting_upi'] = False
        else:
            await update.message.reply_text("‚ùå Invalid UPI ID. Please try again.")

# Set up the bot
def main():
    application = ApplicationBuilder().token('7907085474:AAFQzJ53wXhoW37zKc7WkKPJnRsed-U_7Xo').build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Run the bot
    application.run_polling()

if __name__ == '__main__':
    main()